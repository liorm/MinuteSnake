{
  "version": 3,
  "sources": ["../node_modules/seedrandom/lib/alea.js", "../node_modules/seedrandom/lib/xor128.js", "../node_modules/seedrandom/lib/xorwow.js", "../node_modules/seedrandom/lib/xorshift7.js", "../node_modules/seedrandom/lib/xor4096.js", "../node_modules/seedrandom/lib/tychei.js", "../node_modules/seedrandom/seedrandom.js", "../node_modules/seedrandom/index.js", "../src/backend/utils.ts", "../src/backend/game-logic.ts", "../src/game-renderer.ts", "../src/backend/state-handlers.ts", "../src/game-engine.ts", "../src/app.ts"],
  "sourcesContent": ["// A port of an algorithm by Johannes Baag\u00F8e <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baag\u00F8e <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xorshift7\" algorithm by\n// Fran\u00E7ois Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n", "// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n", "// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n", "// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baag\u00F8e.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by Fran\u00E7ois Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n", "/**\n * A 2D vector class providing essential operations for game position calculations.\n * Used throughout the game for snake positions, apple placement, and collision detection.\n * Supports vector arithmetic, comparison, and transformation operations.\n *\n * Example:\n * ```typescript\n * const pos = new Vector(10, 20);\n * const newPos = pos.add(new Vector(5, 0)); // Move right by 5\n * ```\n */\nexport class Vector {\n  x: number;\n  y: number;\n\n  constructor(v: Vector);\n  constructor(x: number, y: number);\n  constructor(vx: Vector | number, y?: number) {\n    if (vx instanceof Vector) {\n      this.x = vx.x;\n      this.y = vx.y;\n    } else {\n      this.x = vx || 0;\n      this.y = y || 0;\n    }\n  }\n\n  /**\n   * Checks if this vector equals another vector or coordinate pair.\n   * Used for collision detection and position comparison.\n   */\n  equals(v: Vector | null | undefined): boolean;\n  equals(x: number, y: number): boolean;\n  equals(vx: Vector | number | null | undefined, y?: number): boolean {\n    if (vx === undefined || vx === null) {\n      return false;\n    }\n\n    if (vx instanceof Vector) {\n      return this.x === vx.x && this.y === vx.y;\n    } else {\n      return this.x === vx && this.y === y;\n    }\n  }\n\n  /**\n   * Creates a new Vector with the same coordinates.\n   * Useful when you need a copy that won't be modified by reference.\n   */\n  clone(): Vector {\n    return new Vector(this);\n  }\n\n  /**\n   * Adds another vector or coordinate pair to this vector.\n   * Returns a new Vector without modifying the original.\n   * Used for calculating new positions and offsets.\n   */\n  add(v: Vector): Vector;\n  add(x: number, y: number): Vector;\n  add(vx: Vector | number, y?: number): Vector {\n    if (vx instanceof Vector) {\n      return new Vector(this.x + vx.x, this.y + vx.y);\n    } else {\n      return new Vector(this.x + vx, this.y + (y || 0));\n    }\n  }\n\n  /**\n   * Subtracts another vector or coordinate pair from this vector.\n   * Returns a new Vector without modifying the original.\n   * Used for calculating distances and relative positions.\n   */\n  sub(v: Vector): Vector;\n  sub(x: number, y: number): Vector;\n  sub(vx: Vector | number, y?: number): Vector {\n    if (vx instanceof Vector) {\n      return this.add(new Vector(-vx.x, -vx.y));\n    } else {\n      return this.add(-vx, -(y || 0));\n    }\n  }\n\n  /**\n   * Multiplies the vector by a scalar value.\n   * Used for scaling positions and directions.\n   */\n  mul(scalar: number): Vector {\n    return new Vector(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Returns a new Vector with negated coordinates.\n   * Shorthand for multiplying by -1.\n   */\n  invert(): Vector {\n    return this.mul(-1);\n  }\n}\n", "import { Vector } from './utils.js';\nimport seedrandom from 'seedrandom';\n\nfunction assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x);\n}\n\n/**\n * Represents a timestamped game input event used for replay functionality.\n * Captures both the type of input and when it occurred during gameplay.\n */\nexport interface IGameEventInput {\n  eventTime: number;\n  gameInput: GameInput;\n}\n\n/**\n * Represents cardinal directions for snake movement.\n * Opposing directions have values that sum to 0, which is used\n * to prevent 180-degree turns.\n */\nexport enum EDirection {\n  UP = 1,\n  RIGHT = 2,\n  LEFT = -2,\n  DOWN = -1,\n}\n\n/**\n * Basic game configuration options defining the playing field size\n * and random number generation seed for deterministic gameplay.\n */\nexport interface IGameOptions {\n  xTiles: number;\n  yTiles: number;\n  seed: number;\n}\n\n/**\n * Complete game stage configuration including wall holes (portals),\n * obstacle blocks, and initial snake positions/directions.\n * Extends IGameOptions to include all elements needed for stage setup.\n */\nexport interface IGameStage extends IGameOptions {\n  wallHoles: Vector[];\n  blocks: Vector[];\n\n  /// Starting positions for the snake.\n  snakes: {\n    position: Vector;\n    direction: EDirection;\n  }[];\n}\n\n/**\n * Represents the current state of a snake in the game.\n * Tracks position, length, occupied tiles, current direction\n * and queued direction changes.\n */\nexport interface IGameStateSnake {\n  position: Vector;\n  length: number;\n  tiles: Vector[];\n  dir: EDirection;\n  pendingDirs: EDirection[];\n}\n\n/**\n * Complete game state including all snakes, obstacles,\n * apple position, game speed and win/loss condition.\n * Used by both the game logic and renderer.\n */\nexport interface IGameState {\n  blocks: Vector[];\n  speed: number;\n  applePos: Vector | null;\n  snakes: IGameStateSnake[];\n  gameOver: boolean;\n}\n\n/**\n * Direction change input for a specific snake.\n * Used to queue new movement directions that will be applied\n * on the next game step.\n */\nexport interface IGameInputDirection {\n  inputType: 'direction';\n  dir: EDirection;\n  snakeIdx: number;\n}\n\n/**\n * Speed adjustment input that modifies the game's\n * update rate. Controls how frequently the game state advances.\n */\nexport interface IGameInputSpeed {\n  inputType: 'speed';\n  speedIncrement: number;\n}\n\nexport type GameInput = IGameInputDirection | IGameInputSpeed;\n\n/**\n * Core game logic implementation handling snake movement, collisions,\n * apple placement, and game state management. Uses seeded random number\n * generation for deterministic apple placement, enabling replay functionality.\n *\n * Maintains game state including snake positions, apple location, blocks,\n * and handles input processing for direction changes and speed adjustments.\n *\n * Example:\n * ```typescript\n * const gameLogic = new GameLogic(gameStage);\n * gameLogic.input({ inputType: 'direction', dir: EDirection.RIGHT, snakeIdx: 0 });\n * gameLogic.advanceTime(16); // Advance game by 16ms\n * ```\n */\nexport class GameLogic {\n  private _prng: () => number;\n  private _state: IGameState;\n  private _pendingDuration: number = 0;\n  private _totalDuration: number = 0;\n  onInputCallback: ((event: IGameEventInput) => void) | undefined;\n\n  get options(): IGameOptions {\n    return this._stage;\n  }\n  get state(): IGameState {\n    return this._state;\n  }\n  get totalDuration(): number {\n    return this._totalDuration;\n  }\n\n  constructor(private _stage: IGameStage) {\n    this._prng = seedrandom(`${_stage.seed}\\0`);\n    this._state = this._createInitialState();\n  }\n\n  private _createInitialState(): IGameState {\n    let blocks: Vector[] = [];\n    for (let x = 0; x < this._stage.xTiles; ++x) {\n      blocks.push(new Vector(x, 0), new Vector(x, this._stage.yTiles - 1));\n    }\n    // Add vertical walls (left and right) excluding corners\n    for (let y = 1; y < this._stage.yTiles - 1; ++y) {\n      blocks.push(new Vector(0, y), new Vector(this._stage.xTiles - 1, y));\n    }\n    blocks = blocks.filter(block => {\n      return !this._stage.wallHoles.find(hole => hole.equals(block));\n    });\n    blocks.push(...this._stage.blocks);\n\n    return {\n      blocks,\n      speed: 12,\n      applePos: null,\n      snakes: this._stage.snakes.map(snake => ({\n        position: snake.position,\n        length: 4,\n        tiles: [],\n        dir: snake.direction,\n        pendingDirs: [],\n      })),\n      gameOver: false,\n    };\n  }\n\n  private _resetState(): void {\n    this._pendingDuration = 0;\n    this._totalDuration = 0;\n    this._prng = seedrandom(`${this.options.seed}\\0`);\n    this._state = this._createInitialState();\n  }\n\n  private _actionStep(): boolean {\n    const state = this._state;\n\n    if (state.gameOver) {\n      return false;\n    }\n\n    for (let i = 0; i < state.snakes.length; i++) {\n      const snake = state.snakes[i];\n      if (snake.pendingDirs.length > 0) {\n        snake.dir = snake.pendingDirs[0];\n        snake.pendingDirs.splice(0, 1);\n      }\n\n      let direction: Vector;\n      switch (snake.dir) {\n        case EDirection.UP:\n          direction = new Vector(0, 1);\n          break;\n        case EDirection.DOWN:\n          direction = new Vector(0, -1);\n          break;\n        case EDirection.LEFT:\n          direction = new Vector(-1, 0);\n          break;\n        case EDirection.RIGHT:\n          direction = new Vector(1, 0);\n          break;\n        default:\n          return assertNever(snake.dir);\n      }\n\n      const newPosition = snake.position.add(direction);\n\n      // Check collision with other snakes before updating position\n      for (let j = 0; j < state.snakes.length; j++) {\n        if (i !== j) {\n          const otherSnake = state.snakes[j];\n          if (otherSnake.tiles.find(v => v.equals(newPosition))) {\n            state.gameOver = true;\n            return false;\n          }\n        }\n      }\n\n      // Hit the wall?\n      if (state.blocks.find(v => v.equals(newPosition))) {\n        state.gameOver = true;\n        return false;\n      }\n\n      // Hit self?\n      if (snake.tiles.find(v => v.equals(newPosition))) {\n        state.gameOver = true;\n        return false;\n      }\n\n      if (newPosition.x < 0) {\n        newPosition.x = this.options.xTiles - 1;\n      }\n      if (newPosition.y < 0) {\n        newPosition.y = this.options.yTiles - 1;\n      }\n      if (newPosition.x > this.options.xTiles - 1) {\n        newPosition.x = 0;\n      }\n      if (newPosition.y > this.options.yTiles - 1) {\n        newPosition.y = 0;\n      }\n\n      snake.position = newPosition;\n      snake.tiles.push(newPosition);\n\n      // Ate an apple?\n      if (snake.position.equals(state.applePos)) {\n        state.applePos = null;\n        snake.length += 2;\n      }\n\n      while (snake.tiles.length > snake.length) {\n        snake.tiles.splice(0, 1);\n      }\n      // Check collision with other snakes before updating position\n      for (let j = 0; j < state.snakes.length; j++) {\n        if (i !== j) {\n          const otherSnake = state.snakes[j];\n          if (otherSnake.tiles.find(v => v.equals(newPosition))) {\n            state.gameOver = true;\n            return false;\n          }\n        }\n      }\n\n      snake.position = newPosition;\n      snake.tiles.push(newPosition);\n    }\n\n    if (!state.applePos) {\n      this._actionNewApple();\n    }\n\n    return true;\n  }\n\n  private _actionNewApple(): void {\n    let newPos: Vector;\n    while (true) {\n      newPos = new Vector(\n        Math.floor(this._prng() * this.options.xTiles),\n        Math.floor(this._prng() * this.options.yTiles)\n      );\n\n      if (this._state.blocks.find(v => v.equals(newPos))) {\n        continue;\n      }\n\n      if (\n        this._state.snakes.find(\n          snake => !!snake.tiles.find(v => v.equals(newPos))\n        )\n      ) {\n        continue;\n      }\n\n      break;\n    }\n    this._state.applePos = newPos;\n  }\n\n  private _actionNewDir(snakeIdx: number, newDir: EDirection): boolean {\n    const snakeState = this._state.snakes[snakeIdx];\n    if (snakeState.pendingDirs.length >= 2) {\n      return false;\n    }\n\n    let curDir = snakeState.dir;\n    if (snakeState.pendingDirs.length > 0) {\n      curDir = snakeState.pendingDirs[snakeState.pendingDirs.length - 1];\n    }\n\n    if (curDir === newDir || curDir + newDir === 0) {\n      return false;\n    }\n\n    snakeState.pendingDirs.push(newDir);\n    return true;\n  }\n\n  private _actionSpeedChange(speedIncrement: number): boolean {\n    let newSpeed = this._state.speed + speedIncrement;\n    newSpeed = Math.max(1, Math.min(1000, newSpeed));\n    this._state.speed = newSpeed;\n    return true;\n  }\n\n  input(input: GameInput): void {\n    let handled = false;\n    switch (input.inputType) {\n      case 'direction':\n        handled = this._actionNewDir(input.snakeIdx, input.dir);\n        break;\n      case 'speed':\n        handled = this._actionSpeedChange(input.speedIncrement);\n        break;\n      default:\n        assertNever(input);\n    }\n\n    if (this.onInputCallback && handled) {\n      this.onInputCallback({\n        eventTime: this._totalDuration,\n        gameInput: input,\n      });\n    }\n  }\n\n  advanceTime(duration: number): void {\n    this._totalDuration += duration;\n    this._pendingDuration += duration;\n\n    const stepSize = 1000 / this._state.speed;\n    const totalSteps = Math.floor(this._pendingDuration / stepSize);\n    for (let i = 0; i < totalSteps; ++i) {\n      this._actionStep();\n    }\n    this._pendingDuration -= totalSteps * stepSize;\n  }\n}\n", "import { IGameOptions, IGameState } from './backend/game-logic';\nimport { Vector } from './backend/utils';\n\n/**\n * Defines the visual style for a game tile, supporting both\n * fill and optional stroke colors for various game elements\n * like snakes, apples, and walls.\n */\nexport interface ITileStyle {\n  fillStyle: string;\n  strokeStyle?: string;\n}\n\n/**\n * Handles all visual rendering aspects of the game using the HTML5 Canvas API.\n * Manages responsive sizing of the game board, draws all game elements\n * (snakes, apples, walls), and displays UI elements like the game over screen\n * and playback indicator.\n *\n * Example:\n * ```typescript\n * const renderer = new GameRenderer();\n * renderer.initRenderer(gameOptions);\n * renderer.onCanvasSizeChanged(canvas.width, canvas.height);\n * renderer.render(ctx, gameState, false);\n * ```\n */\nexport class GameRenderer {\n  private _paddingX: number = 0;\n  private _paddingY: number = 0;\n  private _tileWidth: number = 0;\n  private _tileHeight: number = 0;\n  private _boardHeight: number = 0;\n  private _boardWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _canvasWidth: number = 0;\n  private _gameOptions!: IGameOptions;\n\n  initRenderer(gameOptions: IGameOptions): void {\n    this._gameOptions = gameOptions;\n  }\n\n  onCanvasSizeChanged(w: number, h: number): void {\n    const tileLength = Math.min(\n      w / this._gameOptions.xTiles,\n      h / this._gameOptions.yTiles\n    );\n\n    this._tileWidth = tileLength;\n    this._tileHeight = tileLength;\n    this._boardWidth = this._gameOptions.xTiles * this._tileWidth;\n    this._boardHeight = this._gameOptions.yTiles * this._tileHeight;\n    this._paddingX = (w - this._boardWidth) / 2;\n    this._paddingY = (h - this._boardHeight) / 2;\n    this._canvasWidth = w;\n    this._canvasHeight = h;\n  }\n\n  private _drawTile(\n    ctx: CanvasRenderingContext2D,\n    v: Vector,\n    style: string | ITileStyle\n  ): void {\n    const { fillStyle, strokeStyle } =\n      typeof style === 'string'\n        ? { fillStyle: style, strokeStyle: style }\n        : style;\n\n    ctx.fillStyle = fillStyle;\n    ctx.fillRect(\n      this._paddingX + v.x * this._tileWidth,\n      this._paddingY +\n        this._boardHeight -\n        v.y * this._tileHeight -\n        this._tileHeight,\n      this._tileWidth,\n      this._tileHeight\n    );\n\n    if (strokeStyle) {\n      ctx.strokeStyle = strokeStyle;\n      ctx.strokeRect(\n        this._paddingX + v.x * this._tileWidth,\n        this._paddingY +\n          this._boardHeight -\n          v.y * this._tileHeight -\n          this._tileHeight,\n        this._tileWidth,\n        this._tileHeight\n      );\n    }\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    gameState: IGameState,\n    playbackMode: boolean\n  ): void {\n    // Draw background\n    ctx.fillStyle = 'green';\n    ctx.fillRect(\n      this._paddingX,\n      this._paddingY,\n      this._boardWidth,\n      this._boardHeight\n    );\n\n    // Draw blocks\n    gameState.blocks.forEach(block => {\n      this._drawTile(ctx, block, 'black');\n    });\n\n    // Draw apple\n    if (gameState.applePos) {\n      this._drawTile(ctx, gameState.applePos, 'red');\n    }\n\n    // Draw snakes\n    const snakeColors = [\n      '#4040FF',\n      '#FF4040',\n      '#40FF40',\n      '#FFFF40',\n      '#FF40FF',\n      '#40FFFF',\n    ];\n    const darkenedSnakeColors = snakeColors.map(color => {\n      const num = parseInt(color.slice(1), 16);\n      const r = Math.max((num >> 16) - 40, 0);\n      const g = Math.max(((num >> 8) & 0x00ff) - 40, 0);\n      const b = Math.max((num & 0x0000ff) - 40, 0);\n      return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n    });\n\n    gameState.snakes.forEach((snake, index) => {\n      const bodyColor = snakeColors[index % snakeColors.length];\n      const headColor = darkenedSnakeColors[index % darkenedSnakeColors.length];\n      snake.tiles.forEach(tile => {\n        this._drawTile(ctx, tile, bodyColor);\n      });\n      this._drawTile(ctx, snake.position, headColor);\n    });\n\n    // Draw playback indicator\n    if (playbackMode) {\n      ctx.beginPath();\n      ctx.moveTo(10, 10);\n      ctx.lineTo(10, 60);\n      ctx.lineTo(60, 35);\n      ctx.closePath();\n      ctx.fillStyle = '#50FF50';\n      ctx.fill();\n    }\n\n    // Draw game over\n    if (gameState.gameOver) {\n      const fontSize = this._boardHeight / 10;\n      ctx.font = `Bold ${fontSize}px Georgia`;\n      const text = 'Game Over!';\n      const measurement = ctx.measureText(text);\n      const x = (this._canvasWidth - measurement.width) / 2;\n      const y = (this._canvasHeight - fontSize) / 2;\n\n      ctx.fillStyle = 'black';\n      ctx.fillText(text, x, y);\n      ctx.strokeStyle = 'white';\n      ctx.strokeText(text, x, y);\n    }\n  }\n}\n", "import {\n  GameLogic,\n  IGameStage,\n  IGameEventInput,\n  IGameState,\n  GameInput,\n} from './game-logic';\n\n/**\n * Abstract base class defining the core game state management interface.\n * Provides the foundation for both live gameplay and replay functionality\n * through the LiveHandler and PlaybackHandler implementations.\n */\n\nexport abstract class GameHandlerBase {\n  /**\n   * Gets the current game stage containing level configuration and settings\n   * @returns {IGameStage} The current game stage\n   */\n  abstract get gameStage(): IGameStage;\n\n  /**\n   * Gets the current state of the game including player position, score, etc.\n   * @returns {IGameState} The current game state\n   */\n  abstract get state(): IGameState;\n\n  /**\n   * Gets the list of recorded game inputs for replay functionality\n   * @returns {IGameEventInput[]} Array of saved game inputs with timestamps\n   */\n  abstract get savedInputs(): IGameEventInput[];\n\n  /**\n   * Indicates if the current game session is complete\n   * @returns {boolean} True if game is finished, false otherwise\n   */\n  abstract get isDone(): boolean;\n\n  /**\n   * Advances the game time by the specified duration\n   * @param {number} duration - The time in milliseconds to advance\n   */\n  abstract advanceTime(duration: number): void;\n\n  /**\n   * Processes a game input event like player movement\n   * @param {GameInput} input - The input event to process\n   */\n  abstract performInput(input: GameInput): void;\n}\n\n/**\n * Handles replay functionality by playing back recorded game inputs.\n * Processes saved inputs in sequence to recreate previous gameplay,\n * ignoring new player inputs during playback.\n *\n * Example: Activated when player presses 'P' to review previous gameplay\n */\nexport class PlaybackHandler extends GameHandlerBase {\n  private _gameLogic: GameLogic;\n  private _inputIndex: number;\n\n  get gameStage(): IGameStage {\n    return this._gameStage;\n  }\n\n  constructor(\n    private _gameStage: IGameStage,\n    public savedInputs: IGameEventInput[]\n  ) {\n    super();\n\n    this._gameLogic = new GameLogic(this._gameStage);\n    this._inputIndex = 0;\n  }\n\n  get isDone(): boolean {\n    return this._inputIndex >= this.savedInputs.length;\n  }\n\n  advanceTime(duration: number): void {\n    if (this._inputIndex >= this.savedInputs.length) {\n      return;\n    }\n\n    while (duration > 0) {\n      let newPlayedDuration = this._gameLogic.totalDuration + duration;\n      const nextInput = this.savedInputs[this._inputIndex];\n\n      if (newPlayedDuration >= nextInput.eventTime) {\n        newPlayedDuration = nextInput.eventTime;\n      }\n\n      this._gameLogic.advanceTime(\n        newPlayedDuration - this._gameLogic.totalDuration\n      );\n\n      if (this._gameLogic.totalDuration >= nextInput.eventTime) {\n        this._gameLogic.input(nextInput.gameInput);\n        ++this._inputIndex;\n      }\n\n      duration = newPlayedDuration - this._gameLogic.totalDuration;\n    }\n  }\n\n  get state(): IGameState {\n    return this._gameLogic.state;\n  }\n\n  performInput(_input: GameInput): void {\n    // Ignore inputs in playback mode\n  }\n}\n\n/**\n * Manages live gameplay state and input handling.\n * Maintains a record of player inputs for replay functionality\n * while delegating game logic to the GameLogic class.\n *\n * Example: Used during active gameplay to process player movements\n * and track game state changes.\n */\nexport class LiveHandler extends GameHandlerBase {\n  private _gameLogic: GameLogic;\n  savedInputs: IGameEventInput[];\n\n  get gameStage(): IGameStage {\n    return this._gameStage;\n  }\n\n  constructor(\n    private _gameStage: IGameStage,\n    savedInputs?: IGameEventInput[]\n  ) {\n    super();\n\n    this.savedInputs = savedInputs || [];\n    this._gameLogic = new GameLogic(this._gameStage);\n\n    if (this.savedInputs.length > 0) {\n      for (const savedInput of this.savedInputs) {\n        this._gameLogic.advanceTime(\n          savedInput.eventTime - this._gameLogic.totalDuration\n        );\n        this._gameLogic.input(savedInput.gameInput);\n      }\n    }\n\n    this._gameLogic.onInputCallback = (e: IGameEventInput): void =>\n      this._onGameInput(e);\n  }\n\n  advanceTime(duration: number): void {\n    this._gameLogic.advanceTime(duration);\n  }\n\n  get isDone(): boolean {\n    return false;\n  }\n\n  get state(): IGameState {\n    return this._gameLogic.state;\n  }\n\n  private _onGameInput(e: IGameEventInput): void {\n    this.savedInputs.push(e);\n  }\n\n  performInput(input: GameInput): void {\n    this._gameLogic.input(input);\n  }\n}\n", "import { EDirection, GameInput, IGameStage } from './backend/game-logic.js';\nimport { GameRenderer } from './game-renderer.js';\nimport {\n  GameHandlerBase,\n  LiveHandler,\n  PlaybackHandler,\n} from './backend/state-handlers.js';\nimport { Vector } from './backend/utils.js';\n\n/**\n * Core game engine that coordinates rendering, input handling, and game state.\n * Manages switching between live and playback modes, handles window/canvas\n * setup, and maintains the game loop. Works with GameRenderer for visual output\n * and interfaces with GameHandlerBase implementations for game state management.\n *\n * Example: The main engine instance created by GameApp that runs the entire game\n */\nexport class GameEngine {\n  private _gameRenderer!: GameRenderer; // Will be initialized in start()\n  private _handler!: GameHandlerBase; // Will be initialized in start()\n  private _lastEngineTime!: number; // Will be initialized in start()\n  private _isPlaybackMode = false;\n\n  constructor(\n    private window: Window,\n    private canvas: HTMLCanvasElement,\n    private ctx: CanvasRenderingContext2D\n  ) {}\n\n  start(): void {\n    this._gameRenderer = new GameRenderer();\n    this._restartLiveMode();\n    this._initListeners();\n    this._updateCanvasDimensions();\n    this._timeout();\n  }\n\n  private _initListeners(): void {\n    this.window.addEventListener('resize', () =>\n      this._updateCanvasDimensions()\n    );\n    this.window.addEventListener('keydown', e => this._onKeyDown(e));\n  }\n\n  private _onKeyDown(event: KeyboardEvent): void {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'p') {\n      if (!this._isPlaybackMode) {\n        this._enterPlaybackMode();\n      } else {\n        this._resumeLiveMode();\n      }\n    } else if (event.key.toLowerCase() === 'n') {\n      this._restartLiveMode();\n    } else if (event.key === '+') {\n      this._performInput({\n        inputType: 'speed',\n        speedIncrement: 1,\n      });\n    } else if (event.key === '-') {\n      this._performInput({\n        inputType: 'speed',\n        speedIncrement: -1,\n      });\n    } else {\n      let newDirection: EDirection;\n      let snakeIdx = 1;\n\n      switch (event.key.toLowerCase()) {\n        case 's':\n          snakeIdx = 0;\n        case 'arrowdown':\n          newDirection = EDirection.DOWN;\n          break;\n        case 'w':\n          snakeIdx = 0;\n        case 'arrowup':\n          newDirection = EDirection.UP;\n          break;\n        case 'a':\n          snakeIdx = 0;\n        case 'arrowleft':\n          newDirection = EDirection.LEFT;\n          break;\n        case 'd':\n          snakeIdx = 0;\n        case 'arrowright':\n          newDirection = EDirection.RIGHT;\n          break;\n        default:\n          return;\n      }\n\n      this._performInput({\n        inputType: 'direction',\n        dir: newDirection!,\n        snakeIdx,\n      });\n    }\n\n    event.preventDefault();\n  }\n\n  private _updateCanvasDimensions(): void {\n    this.canvas.height = this.window.innerHeight;\n    this.canvas.width = this.window.innerWidth;\n\n    this._gameRenderer.onCanvasSizeChanged(\n      this.canvas.width,\n      this.canvas.height\n    );\n    this._draw();\n  }\n\n  private _timeout(): void {\n    this._update();\n    this._draw();\n    requestAnimationFrame(() => this._timeout());\n  }\n\n  private _update(): void {\n    this._advanceTimeToNow();\n  }\n\n  private _performInput(input: GameInput): void {\n    this._advanceTimeToNow();\n    this._handler.performInput(input);\n  }\n\n  private _advanceTimeToNow(): void {\n    const now = performance.now();\n    const duration = now - this._lastEngineTime;\n    this._handler.advanceTime(duration);\n    this._lastEngineTime = now;\n\n    if (this._isPlaybackMode && this._handler.isDone) {\n      this._resumeLiveMode();\n    }\n  }\n\n  private _restartLiveMode(): void {\n    const x = 60,\n      y = 40;\n    const gameStage: IGameStage = {\n      xTiles: x,\n      yTiles: y,\n      seed: Date.now(),\n      wallHoles: [\n        new Vector(0, y / 2),\n        new Vector(0, y / 2 + 1),\n        new Vector(x - 1, y / 2),\n        new Vector(x - 1, y / 2 + 1),\n      ],\n      blocks: [\n        new Vector(x / 2, y / 2),\n        new Vector(x / 2 - 1, y / 2 - 1),\n        new Vector(x / 2, y / 2 - 1),\n        new Vector(x / 2 - 1, y / 2),\n      ],\n      snakes: [\n        {\n          position: new Vector(4, 4),\n          direction: EDirection.RIGHT,\n        },\n        {\n          position: new Vector(x - 4, y - 4),\n          direction: EDirection.LEFT,\n        },\n      ],\n    };\n\n    this._isPlaybackMode = false;\n    this._handler = new LiveHandler(gameStage);\n    this._lastEngineTime = performance.now();\n    this._gameRenderer.initRenderer(this._handler.gameStage);\n  }\n\n  private _resumeLiveMode(): void {\n    this._isPlaybackMode = false;\n    this._handler = new LiveHandler(\n      this._handler.gameStage,\n      this._handler.savedInputs\n    );\n  }\n\n  private _enterPlaybackMode(): void {\n    this._isPlaybackMode = true;\n    this._handler = new PlaybackHandler(\n      this._handler.gameStage,\n      this._handler.savedInputs\n    );\n    this._lastEngineTime = performance.now();\n  }\n\n  private _draw(): void {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this._gameRenderer.render(\n      this.ctx,\n      this._handler.state,\n      this._isPlaybackMode\n    );\n  }\n}\n", "import { GameEngine } from './game-engine.js';\n\n/**\n * Main application entry point that bootstraps the game.\n * Handles canvas initialization and creates the GameEngine instance\n * when the DOM content is loaded. Serves as the primary coordinator\n * between the browser environment and the game engine.\n *\n * Example: The game starts when `new GameApp()` is called, triggering\n * canvas setup and game engine initialization\n */\nclass GameApp {\n  private gameEngine: GameEngine | null = null;\n\n  constructor() {\n    window.addEventListener('DOMContentLoaded', () => this.initialize());\n  }\n\n  private initialize(): void {\n    const canvas = document.querySelector<HTMLCanvasElement>('#canvas');\n\n    if (!canvas) {\n      console.error('Canvas element not found');\n      return;\n    }\n\n    const context = canvas.getContext('2d');\n\n    if (!context) {\n      console.error('Could not get 2D context');\n      return;\n    }\n\n    this.gameEngine = new GameEngine(window, canvas, context);\n    this.gameEngine.start();\n  }\n}\n\n// Initialize the game\nnew GameApp();\n"],
  "mappings": "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",
  "names": ["module", "define", "module", "define", "module", "define", "module", "define", "me", "seed", "module", "define", "me", "seed", "module", "define", "seedrandom", "prng", "seed", "t", "i", "j", "s", "require_seedrandom", "seedrandom", "window"]
}
